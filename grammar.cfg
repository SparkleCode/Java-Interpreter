program → declaration* eof ;

declaration → funDecl
            | varDecl
            | statement ;
statement   → exprStmt
            | ifStmt
            | printStmt
            | returnStmt
            | whileStmt
            | forStmt
            | block;

funDecl  → "fn" function ;
function → IDENTIFIER "(" parameters? ")" block ;
varDecl → "var" IDENTIFIER ( "=" expression )? ";" ;
parameters → IDENTIFIER ( "," IDENTIFIER )* ;

exprStmt   → expression ";" ;
ifStmt     → "if" "(" expression ")" statement ( "else" statement )? ;
printStmt  → "print" expression ";" ;
returnStmt → "return" expression? ";" ;
whileStmt  → "while" "(" expression ")" statement ;
forStmt    → "for" "(" ( varDecl | exprStmt | ";" )
                      expression? ";"
                      expression? ")" statement ;
block      → "{" declaration* "}" ;

expression     → assignment ;
assignment     → identifier "=" assignment
               | logic_or ;
logic_or       → logic_and ( "or" logic_and )* ;
logic_and      → equality ( "and" equality )* ;
equality       → comparison ( ( "!=" | "==" ) comparison )* ;
comparison     → addition ( ( ">" | ">=" | "<" | "<=" ) addition )* ;
addition       → multiplication ( ( "-" | "+" ) multiplication )* ;
multiplication → unary ( ( "/" | "*" ) unary )* ;
unary          → ( "!" | "-" ) unary | call ;
call           → primary ( "(" arguments ")" )* ;
arguments      → expression ( "," expression )* ;

primary  → "true" | "false" | "null" | "this"
         | NUMBER | STRING
         | "(" expression ")"
         | IDENTIFIER ;
